<?xml version="1.0" encoding="UTF-8"?>
<chapter id="api" version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns52="http://www.w3.org/2000/svg"
         xmlns:ns5="http://www.w3.org/1999/xlink"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
	<title>Facebook API Binding</title>
  
	<para>
    Spring.NET Social Facebook offers integration with Facebook's REST API through the <interfacename>IFacebook</interfacename> interface 
    and its implementation, <classname>FacebookTemplate</classname>.			
	</para>

	<para>
		Creating an instance of <classname>FacebookTemplate</classname> involves invoking its constructor,
    passing in the application's OAuth credentials, an authorized access token authorizing the application to act on a user's behalf.
    <sbr/>For example:
	</para>
	
	<programlisting language="csharp"><![CDATA[string appId = "..."; // The application's id
string appSecret = "..."; // The application's secret
IFacebook facebook = new FacebookTemplate(appId, appSecret);]]></programlisting>
	
  <para>
		In addition, <classname>FacebookTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:
	</para>
	
	<programlisting language="csharp"><![CDATA[IFacebook facebook = new FacebookTemplate();]]></programlisting>
	
	<para>
		When constructed with the default constructor, <classname>FacebookTemplate</classname> will allow a few simple operations that do not require authorization, 
    such as searching. Attempting other operations, such as posting will fail with an <classname>Exception</classname> being thrown.
	</para>
  
	<para>
		You can also get an instance of <interfacename>IFacebook</interfacename> from the <classname>FacebookServiceProvider</classname> class.
		<sbr/>The example code below shows use of the <classname>FacebookServiceProvider</classname> to retrieve an instance of <interfacename>IFacebook</interfacename> 
    after authenticating through OAuth2 server-side flow:
    <programlisting language="csharp"><![CDATA[FacebookServiceProvider serviceProvider = new FacebookServiceProvider("apiId", "apiSecret");
OAuth2Operations oauthOperations = serviceProvider.AuthOperations;
OAuth2Parameters parameters = new OAuth2Parameters();
parameters.RedirectUrl = "http://localhost/Facebook/Callback";
parameters.Scope = "publish_stream";
string authorizeUrl = serviceProvider.AuthOperations.BuildAuthorizeUrl(GrantType.AuthorizationCode, parameters);
Response.Redirect(authorizeUrl);

// upon receiving the callback from the provider:
AccessGrant accessGrant = serviceProvider.OAuthOperations.ExchangeForAccess(code, "http://localhost/Facebook/Callback", null);
IFacebook facebookApi = serviceProvider.GetApi(accessGrant.AccessToken);]]></programlisting>
  </para>
	
	<para>
		Once you have a <interfacename>IFacebook</interfacename>, you can perform a several operations against Facebook.
    <sbr/><interfacename>IFacebook</interfacename> is defined as follows:
  </para>

  <programlisting language="csharp"><![CDATA[public interface IFacebook : IApiBinding
{
  // ..

  IRestOperations RestOperations { get; }
}]]></programlisting>

  <para>
    The first X properties return sub-APIs, partitioning the Facebook service API into divisions targeting specific facets of Facebook functionality.
    These sub-APIs are defined by interfaces described in <xref linkend="table-facebook-sub-apis" />.
  </para>

  <table xml:id="table-facebook-sub-apis">
    <title>Facebook's Sub-APIs</title>
    <tgroup cols="2">
      <colspec align="left" />
      <colspec colnum="1" colname="col1" colwidth="2*"/>
      <colspec colnum="2" colname="col2" colwidth="2*"/>
      <thead>
        <row>
          <entry align="center">Sub-API Interface</entry>
          <entry align="center">Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>...</entry>
          <entry>...</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>
    The last property <literal>RestOperations</literal> gets the underlying <classname>RestTemplate</classname> object
    allowing for consumption of Facebook endpoints that may not be otherwise covered by the API binding.
  </para>

  <para><sbr/></para>
  
  <para>
    There are 3 ways to call a method depending on the target Framework:
    <itemizedlist>
      <listitem>
        <emphasis role="bold">Synchronuous methods</emphasis>
        <para>Available on .NET 2.0 and .NET 3.5</para>
        <programlisting language="csharp"><![CDATA[FacebookProfile profile = facebook.ProfileOperations.GetUserProfile();
Console.WriteLine("Hi " + profile.DisplayName + "!");]]></programlisting>
      </listitem>

      <listitem>
        <emphasis role="bold">Asynchronuous methods</emphasis>
        <para>Available on .NET 2.0, .NET 3.5 and Windows Phone</para>
        <programlisting language="csharp"><![CDATA[FacebookProfile profile = facebook.ProfileOperations.GetUserProfileAsync(
  r =>
  {
    Console.WriteLine("Hi " + r.Response.DisplayName + "!");
  });]]></programlisting>
      </listitem>

      <listitem>
        <emphasis role="bold">Task-based asynchronuous methods (Task Parallel Library)</emphasis>
        <para>Available on .NET 4.0</para>
        <programlisting language="csharp"><![CDATA[FacebookProfile profile = facebook.ProfileOperations.GetUserProfileAsync()
  .ContinueWith(task =>
  {
    Console.WriteLine("Hi " + task.Result.DisplayName + "!");
  });]]></programlisting>
      </listitem>
    </itemizedlist>
  </para>

  <para><sbr/></para>
  
  <para>
    For complete details on the Spring.NET Social's entire Facebook API binding,
    refer to the API documentation from the "doc/api" directory of the distribution
    and to the <ulink url="https://developers.facebook.com/">Facebook REST API documentation</ulink>.
    <sbr/>Samples are provided in the 'examples' directory of the distribution.
  </para>
</chapter>